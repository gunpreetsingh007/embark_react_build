{"version":3,"file":"static/js/9779.071f8945.chunk.js","mappings":"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","sources":["helpers/trackUserEvent.js","screens/MyAccount/addEditAddress.jsx","screens/MyAccount/validation.js"],"sourcesContent":["import Axios from \"../api/Axios\";\r\n\r\nconst axios = new Axios();\r\n\r\nconst trackUserEvent = (event) => {\r\n    if (sessionStorage.getItem(\"session-id\") && isValidUUID(sessionStorage.getItem(\"session-id\"))) {\r\n        axios.callApi(\"/session/trackUserEvent\", {\r\n            method: \"POST\",\r\n            body: {\r\n                event\r\n            }\r\n        })\r\n    }\r\n    else {\r\n        sessionStorage.removeItem('session-id');\r\n        const keyword = 'utm'; // The keyword you want to match\r\n        const matchingParams = getParamsMatchingKeyword(keyword);\r\n        let options = {\r\n            method: \"POST\",\r\n            body: {\r\n                additionalDetails: matchingParams,\r\n                event\r\n            }\r\n        }\r\n        axios.callApi(\"/session/createNewSession\", options).then((result) => {\r\n            sessionStorage.setItem('session-id', result.data.data)\r\n        })\r\n    }\r\n    if(event != \"Add To Cart\"){\r\n        axios.callApi(\"/session/sendFacebookConversionEvent\",{\r\n            method: \"POST\",\r\n            body: {\r\n                eventType: \"PageViewEvent\",\r\n                source_url: window.location.href\r\n            }\r\n        })\r\n    }\r\n    else{\r\n        axios.callApi(\"/session/sendFacebookConversionEvent\",{\r\n            method: \"POST\",\r\n            body: {\r\n                eventType: \"AddToCartEvent\",\r\n                source_url: window.location.href\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction getParamsMatchingKeyword(keyword) {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const matchingParams = {};\r\n\r\n    for (const [key, value] of params) {\r\n        if (key.includes(keyword)) {\r\n            matchingParams[key] = value;\r\n        }\r\n    }\r\n\r\n    return matchingParams;\r\n}\r\n\r\nfunction isValidUUID(uuid) {\r\n    const uuidPattern = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[4][0-9a-fA-F]{3}-[89ABab][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/;\r\n    return uuidPattern.test(uuid);\r\n}\r\n\r\nexport default trackUserEvent","import { useEffect, useState } from \"react\";\nimport { editAddressValidation } from './validation'\nimport Axios from \"../../api/Axios\";\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\nimport { State, City } from \"country-state-city\";\nimport Select from \"react-select\";\nimport store from \"../../store\";\nimport trackUserEvent from \"../../helpers/trackUserEvent\";\n\nconst axios = new Axios();\n\nconst AddEditAddress = () => {\n\n  const { addressType } = useParams()\n  const [searchParams, setSearchParams] = useSearchParams();\n  let currentUser = store.getState().user.currentUser\n  const id = searchParams.get('id')\n  const firstAddress = searchParams.get(\"firstAddress\")\n  let firstName = \"\"\n  let lastName = \"\"\n  let email = \"\"\n  let phone = \"\"\n  if(firstAddress && firstAddress == \"true\"){\n     firstName = currentUser.firstName\n     lastName = currentUser.lastName\n     email = currentUser.email\n     phone = currentUser.contact\n  }\n  const navigate = useNavigate()\n  if(![\"billing-address\", \"shipping-address\"].includes(addressType)){\n    navigate(\"/404\")\n  }\n  const [error, setError] = useState({\n    firstName: false,\n    lastName: false,\n    email: false,\n    state: false,\n    streetAddress: false,\n    city: false,\n    postcode: false,\n    phone: false,\n    message: \"\"\n  });\n\n  const [data, setData] = useState({\n    firstName: firstName,\n    lastName: lastName,\n    email: email,\n    companyName: \"\",\n    gstNumber: \"\",\n    country: \"India\",\n    state: \"\",\n    streetAddress: \"\",\n    landmark: \"\",\n    city: \"\",\n    postcode: \"\",\n    phone: phone\n  });\n\n  const [selectedCountryId, setSelectedCountryId] = useState(\"IN\")\n  const [selectedStateId, setSelectedStateId] = useState(\"\")\n  const [cityValue, setCityValue] = useState({ label: null })\n  const add = sessionStorage.getItem('add');\n\n  const updatedStates = (countryId) => State.getStatesOfCountry(countryId).map((state) => ({ label: state.name, value: state.name, id: state.isoCode }));\n\n  const updatedCities = (countryid, stateId) => City.getCitiesOfState(countryid, stateId).map((city) => ({ label: city.name, value: city.name }))\n\n  const onChange = (value, target) => {\n    setData({\n      ...data,\n      [target]: value,\n    });\n    if (error.email === true || error.city === true || error.firstName === true || error.lastName === true || error.country === true || error.phone || error.postcode || error.state || error.streetAddress) {\n      setError({\n        ...error,\n        [target]: false\n      })\n    }\n  };\n\n  const getUserAccountDetails = async () => {\n    const options = {\n      method: \"GET\"\n    }\n    const result = await axios.callApi(`user/getAddressById/${id}`, options)\n    if (result.status == 200) {\n      setData({\n        ...data,\n        id: result.data.data.id,\n        firstName: result.data.data.firstName,\n        lastName: result.data.data.lastName,\n        email: result.data.data.email,\n        companyName: result.data.data.companyName,\n        gstNumber: result.data.data.gstNumber,\n        country: result.data.data.country,\n        state: result.data.data.state,\n        streetAddress: result.data.data.streetAddress,\n        landmark: result.data.data.landmark,\n        city: result.data.data.city,\n        postcode: result.data.data.pincode + \"\",\n        phone: result.data.data.contact\n      })\n      setCityValue({ label: result.data.data.city })\n      setSelectedStateId(result.data.data.stateId)\n    }\n  }\n\n  const handleSubmit = async (e) => {\n    try {\n      e.preventDefault()\n      const valid = editAddressValidation(data)\n      cityValue.label == null ? setError({ ...valid, city: true }) : setError(valid)\n      if (valid.city || valid.firstName || valid.lastName || valid.email || valid.country || valid.phone || valid.postcode || valid.state || valid.streetAddress || cityValue.label == null) {\n        return\n      }\n      const options = {\n        method: \"POST\",\n        body: { ...data, selectedStateId, addressType: (addressType == \"billing-address\") ? \"billing\" : \"shipping\" }\n      }\n      const result = await axios.callApi(`user/createEditAddresses`, options)\n      if (result.status == 200) {\n        navigate('/checkout')\n      }\n    }\n    catch (error) {\n      console.error(\"Something went wrong\")\n    }\n  }\n\n  useEffect(() => {\n    if (id)\n      getUserAccountDetails()\n  }, [])\n\n  useEffect(() => {\n    trackUserEvent(\"Add/Edit Address\")\n  },[])\n\n  return (\n    <div className=\"edit-account-container container\" style={{ backgroundColor: \"white\" }}>\n      <div className=\"text-style mt-4\">\n        {addressType === \"billing-address\" ? \"Billing address\" : \"Shipping address\"}\n      </div>\n      <form>\n        <div className=\"row\" style={{ marginTop: \"25px\" }}>\n          <div className='col-sm-12 col-lg-6 form-group mb-2'>\n            <label htmlFor=\"firstName\" className='form-label'>First Name</label>\n            <input type=\"text\" id='firstName' className={`form-control ${error.firstName ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'firstName')} value={data?.firstName} />\n            {error.firstName && <div className='error'>\n              Please enter your first name\n            </div>}\n          </div>\n          <div className='col form-group mb-2'>\n            <label htmlFor=\"lastName\" className='form-label'>Last Name</label>\n            <input type=\"text\" id='lastName' className={`form-control ${error.lastName ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'lastName')} value={data?.lastName} />\n            {error.lastName && <div className='error'>\n              Please enter your last name\n            </div>}\n          </div>\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"companyName\" className='form-label'>Company name (Optional)</label>\n          <input type=\"text\" id='companyName' className=\"form-control\" onChange={e => onChange(e.target.value, 'companyName')} value={data?.companyName} />\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"gstNumber\" className='form-label'>GST No. (Optional)</label>\n          <input type=\"text\" id='gstNumber' className=\"form-control\" onChange={e => onChange(e.target.value, 'gstNumber')} value={data?.gstNumber} />\n        </div>\n        <div className=\"row\">\n          <div className='col-sm-12 col-lg-6 form-group mb-2'>\n            <label htmlFor=\"streetAddress\" className='form-label'>Address</label>\n            <input type=\"text\" id='streetAddress' className={`form-control ${error.streetAddress ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'streetAddress')} value={data?.streetAddress} />\n            {error.streetAddress && <div className='error'>\n              Please enter your address\n            </div>}\n          </div>\n          <div className='col form-group mb-2'>\n            <label htmlFor=\"landmark\" className='form-label'>Landmark (Optional)</label>\n            <input type=\"text\" id=\"landmark\" className=\"form-control\" onChange={e => onChange(e.target.value, 'landmark')} value={data?.landmark} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className='col-sm-12 col-lg-6 form-group mb-2'>\n            <label className='form-label'>Country</label>\n            <Select\n              className={`${error.country ? \"errorSelectField\" : \"\"}`}\n              options={[{\n                \"label\": \"India\",\n                \"value\": \"India\",\n                \"id\": \"IN\"\n              }]}\n              onChange={e => {\n                onChange(e.value, 'country')\n              }}\n              value={{ label: \"India\" }}\n            />\n          </div>\n          <div className='col form-group mb-2'>\n            <label htmlFor=\"state\" className='form-label'>State</label>\n            <Select\n              className={`${error.state ? \"errorSelectField\" : \"\"}`}\n              options={updatedStates(selectedCountryId)}\n              onChange={e => {\n                setSelectedStateId(e.id)\n                setCityValue({ label: null })\n                onChange(e.value, 'state')\n              }}\n              value={data.state && { label: data.state }}\n            />\n            {error.state && <div className='error'>\n              Please enter your state\n            </div>}\n          </div>\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"city\" className='form-label'>City</label>\n          <Select\n            className={`${error.city ? \"errorSelectField\" : \"\"}`}\n            options={updatedCities(selectedCountryId, selectedStateId ? selectedStateId : null)}\n            onChange={e => {\n              setCityValue({ label: e.value })\n              onChange(e.value, 'city')\n            }}\n            value={cityValue.label && cityValue}\n          />\n          {error.city && <div className='error'>\n            Please enter your city\n          </div>}\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"postcode\" className='form-label'>Pincode</label>\n          <input type=\"number\" id='postcode' className={`form-control ${error.postcode ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'postcode')} value={data?.postcode} />\n          {error.postcode && <div className='error'>\n            Please enter your pincode\n          </div>}\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"phone\" className='form-label'>Phone</label>\n          <input type=\"number\" id='phone' className={`form-control ${error.phone ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'phone')} value={data?.phone} />\n          {error.phone && <div className='error'>\n            Please enter valid phone number\n          </div>}\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"email\" className='form-label'>Email Address</label>\n          <input type=\"email\" id='email' className={`form-control ${error.email ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'email')} value={data?.email} />\n          {error.email && <div className='error'>\n            {error.message ? \"Please enter a valid email\" : \"Please enter your email\"}\n          </div>}\n        </div>\n        <button className='btn btn-dark mt-5 mb-2' onClick={e => handleSubmit(e)}>SAVE ADDRESS</button>\n      </form>\n    </div>\n  )\n}\n\nexport default AddEditAddress;","export const editAccountValidation = (data) => {\n  const { firstName, lastName, email } = data;\n  var errorVal = {\n    firstName: false,\n    lastName: false,\n    email: false,\n    message: \"\"\n  }\n\n  if (!firstName) {\n    errorVal[\"firstName\"] = true\n  }\n  if (!lastName) {\n    errorVal[\"lastName\"] = true\n  }\n  if (!email) {\n    errorVal[\"email\"] = true\n  }\n  if (email && !(/\\S+@\\S+\\.\\S+/.test(email))) {\n    errorVal[\"email\"] = true\n    errorVal[\"message\"] = \"invalid email\"\n  }\n  return errorVal\n};\n\nexport const editAddressValidation = (data) => {\n  const { firstName, lastName, email, state, streetAddress, city, postcode, phone } = data;\n  var errorVal = {\n    firstName: false,\n    lastName: false,\n    email: false,\n    state: false,\n    streetAddress: false,\n    city: false,\n    postcode: false,\n    phone: false,\n    message: \"\"\n  }\n\n  if (!firstName) {\n    errorVal[\"firstName\"] = true\n  }\n  if (!lastName) {\n    errorVal[\"lastName\"] = true\n  }\n  if (!email) {\n    errorVal[\"email\"] = true\n  }\n  if (email && !(/\\S+@\\S+\\.\\S+/.test(email))) {\n    errorVal[\"email\"] = true\n    errorVal[\"message\"] = \"invalid email\"\n  }\n  // if (!country) {\n  //   errorVal[\"country\"] = true\n  // }\n  if (!state) {\n    errorVal[\"state\"] = true\n  }\n  if (!streetAddress) {\n    errorVal[\"streetAddress\"] = true\n  }\n  if (!city) {\n    errorVal[\"city\"] = true\n  }\n  if (!postcode) {\n    errorVal[\"postcode\"] = true\n  }\n  if (!phone) {\n    errorVal[\"phone\"] = true\n  }\n  if (phone && phone.length != 10) {\n    errorVal[\"phone\"] = true\n  }\n  return errorVal\n};"],"names":["axios","Axios","event","sessionStorage","getItem","uuid","test","callApi","method","body","removeItem","matchingParams","keyword","params","URLSearchParams","window","location","search","key","value","includes","getParamsMatchingKeyword","options","additionalDetails","then","result","setItem","data","eventType","source_url","href","AddEditAddress","addressType","useParams","searchParams","setSearchParams","useSearchParams","currentUser","store","user","id","get","firstAddress","firstName","lastName","email","phone","contact","navigate","useNavigate","error","setError","useState","state","streetAddress","city","postcode","message","setData","companyName","gstNumber","country","landmark","selectedCountryId","setSelectedCountryId","selectedStateId","setSelectedStateId","cityValue","setCityValue","label","onChange","target","useEffect","async","concat","status","pincode","stateId","getUserAccountDetails","trackUserEvent","_jsxs","className","style","backgroundColor","children","_jsx","marginTop","htmlFor","type","required","e","Select","countryId","State","map","name","isoCode","countryid","City","onClick","preventDefault","valid","editAddressValidation","console","handleSubmit","updatedCities","editAccountValidation","errorVal","length"],"sourceRoot":""}
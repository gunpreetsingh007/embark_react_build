{"version":3,"file":"static/js/2606.74b5a81e.chunk.js","mappings":"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","sources":["api/index.js","api/Axios.js","screens/MyAccount/editAddress.jsx","screens/MyAccount/validation.js"],"sourcesContent":["import axios from 'axios';\nclass HttpClient {\n\n  constructor(baseURL) {\n    this.instance = axios.create({\n      baseURL,\n    });\n\n    this._initializeResponseInterceptor();\n  }\n\n  _initializeResponseInterceptor = () => {\n    this.instance.interceptors.response.use(\n      this._handleResponse,\n      this._handleError,\n    );\n  };\n\n  _handleResponse = (data) => data;\n\n  _handleError = async ({ response, config }) => {\n    const originalRequest = config;\n    // if (response?.status === 401 && !originalRequest._retry) {\n    //   // call refresh token\n    //   localStorage.clear();\n    //   sessionStorage.clear()\n    //   store.dispatch(logout())\n    //   window.location.href = '/sign-in'\n    // }\n    return Promise.resolve(response);\n  };\n}\n\nexport default HttpClient;","import HttpClient from \"./index\";\nimport store from \"../store\";\nexport default class Axios extends HttpClient {\n  constructor() {\n    super(process.env.REACT_APP_BASE_URL);\n    this._initializeRequestInterceptor();\n  }\n\n\n  _initializeRequestInterceptor = () => {\n    this.instance.interceptors.request.use(this._handleRequest);\n  };\n\n  _handleRequest = async (config) => {\n    let token = store.getState().user.currentUser.accessToken\n    if (token)\n    config.headers.Authorization = token;\n    if(sessionStorage.getItem('session-id'))\n    config.headers['session-id'] = sessionStorage.getItem('session-id');\n    // config.headers['CSRF-TOKEN'] = Cookies.get('v2');\n    return config;\n  };\n\n  callApi(url, options) {\n    return this.instance({\n      method: options.method,\n      url: url,\n      headers: options?.header ? options?.header : {},\n      data: options?.body ? options?.body : undefined,\n      onUploadProgress: options?.onUploadProgress ? options?.onUploadProgress : undefined\n    });\n  };\n}\n","import { useEffect, useState } from \"react\";\nimport { editAddressValidation } from './validation'\nimport Axios from \"../../api/Axios\";\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\nimport { State, City } from \"country-state-city\";\nimport Select from \"react-select\";\nimport store from \"../../store\";\n\nconst axios = new Axios();\n\nconst EditAddress = () => {\n\n  const { addressType } = useParams()\n  const [searchParams, setSearchParams] = useSearchParams();\n  let currentUser = store.getState().user.currentUser\n  const id = searchParams.get('id')\n  const firstAddress = searchParams.get(\"firstAddress\")\n  let firstName = \"\"\n  let lastName = \"\"\n  let email = \"\"\n  let phone = \"\"\n  if(firstAddress && firstAddress == \"true\"){\n     firstName = currentUser.firstName\n     lastName = currentUser.lastName\n     email = currentUser.email\n     phone = currentUser.contact\n  }\n  const navigate = useNavigate()\n  if (![\"billing-address\", \"shipping-address\"].includes(addressType)) {\n    navigate(\"/404\")\n  }\n  const [error, setError] = useState({\n    firstName: false,\n    lastName: false,\n    email: false,\n    state: false,\n    streetAddress: false,\n    city: false,\n    postcode: false,\n    phone: false,\n    message: \"\"\n  });\n\n  const [data, setData] = useState({\n    firstName: firstName,\n    lastName: lastName,\n    email: email,\n    companyName: \"\",\n    gstNumber: \"\",\n    country: \"India\",\n    state: \"\",\n    streetAddress: \"\",\n    landmark: \"\",\n    city: \"\",\n    postcode: \"\",\n    phone: phone\n  });\n\n  const [selectedCountryId, setSelectedCountryId] = useState(\"IN\")\n  const [selectedStateId, setSelectedStateId] = useState(\"\")\n  const [cityValue, setCityValue] = useState({ label: null })\n\n  const updatedStates = (countryId) => State.getStatesOfCountry(countryId).map((state) => ({ label: state.name, value: state.name, id: state.isoCode }));\n\n  const updatedCities = (countryid, stateId) => City.getCitiesOfState(countryid, stateId).map((city) => ({ label: city.name, value: city.name }))\n\n\n  const onChange = (value, target) => {\n    setData({\n      ...data,\n      [target]: value,\n    });\n    if (error.email === true || error.city === true || error.firstName === true || error.lastName === true || error.country === true || error.phone || error.postcode || error.state || error.streetAddress) {\n      setError({\n        ...error,\n        [target]: false\n      })\n    }\n  };\n\n  const getUserAccountDetails = async () => {\n    const options = {\n      method: \"GET\"\n    }\n    const result = await axios.callApi(`user/getAddressById/${id}`, options)\n    if (result.status == 200) {\n      setData({\n        ...data,\n        id: result.data.data.id,\n        firstName: result.data.data.firstName,\n        lastName: result.data.data.lastName,\n        email: result.data.data.email,\n        companyName: result.data.data.companyName,\n        gstNumber: result.data.data.gstNumber,\n        country: result.data.data.country,\n        state: result.data.data.state,\n        streetAddress: result.data.data.streetAddress,\n        landmark: result.data.data.landmark,\n        city: result.data.data.city,\n        postcode: result.data.data.pincode + \"\",\n        phone: result.data.data.contact\n      })\n      setCityValue({ label: result.data.data.city })\n      setSelectedStateId(result.data.data.stateId)\n    }\n  }\n\n  const handleSubmit = async (e) => {\n    try {\n      e.preventDefault()\n      const valid = editAddressValidation(data)\n      cityValue.label == null ? setError({ ...valid, city: true }) : setError(valid)\n      if (valid.city || valid.firstName || valid.lastName || valid.email || valid.country || valid.phone || valid.postcode || valid.state || valid.streetAddress || cityValue.label == null) {\n        return\n      }\n      const options = {\n        method: \"POST\",\n        body: { ...data, selectedStateId, addressType: (addressType == \"billing-address\") ? \"billing\" : \"shipping\" }\n      }\n      const result = await axios.callApi(`user/createEditAddresses`, options)\n      if (result.status == 200) {\n        navigate(\"/my-account/addresses\")\n      }\n    }\n    catch (error) {\n      console.error(\"Something went wrong\")\n    }\n  }\n\n  useEffect(() => {\n    if (id)\n      getUserAccountDetails()\n  }, [])\n\n  return (\n    <div className=\"edit-account-container container-fluid\" style={{ backgroundColor: \"white\" }}>\n      <div className=\"text-style\">\n        {addressType === \"billing-address\" ? \"Billing address\" : \"Shipping address\"}\n      </div>\n      <form>\n        <div className=\"row\" style={{ marginTop: \"25px\" }}>\n          <div className='col-sm-12 col-lg-6 form-group mb-2'>\n            <label htmlFor=\"firstName\" className='form-label'>First Name</label>\n            <input type=\"text\" id='firstName' className={`form-control ${error.firstName ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'firstName')} value={data?.firstName} />\n            {error.firstName && <div className='error'>\n              Please enter your first name\n            </div>}\n          </div>\n          <div className='col form-group mb-2'>\n            <label htmlFor=\"lastName\" className='form-label'>Last Name</label>\n            <input type=\"text\" id='lastName' className={`form-control ${error.lastName ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'lastName')} value={data?.lastName} />\n            {error.lastName && <div className='error'>\n              Please enter your last name\n            </div>}\n          </div>\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"companyName\" className='form-label'>Company name (Optional)</label>\n          <input type=\"text\" id='companyName' className=\"form-control\" onChange={e => onChange(e.target.value, 'companyName')} value={data?.companyName} />\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"gstNumber\" className='form-label'>GST No. (Optional)</label>\n          <input type=\"text\" id='gstNumber' className=\"form-control\" onChange={e => onChange(e.target.value, 'gstNumber')} value={data?.gstNumber} />\n        </div>\n        <div className=\"row\">\n          <div className='col-sm-12 col-lg-6 form-group mb-2'>\n            <label htmlFor=\"streetAddress\" className='form-label'>Address</label>\n            <input type=\"text\" id='streetAddress' className={`form-control ${error.streetAddress ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'streetAddress')} value={data?.streetAddress} />\n            {error.streetAddress && <div className='error'>\n              Please enter your address\n            </div>}\n          </div>\n          <div className='col form-group mb-2'>\n            <label htmlFor=\"landmark\" className='form-label'>Landmark (Optional)</label>\n            <input type=\"text\" id=\"landmark\" className=\"form-control\" onChange={e => onChange(e.target.value, 'landmark')} value={data?.landmark} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className='col-sm-12 col-lg-6 form-group mb-2'>\n            <label className='form-label'>Country</label>\n            <Select\n              className={`${error.country ? \"errorSelectField\" : \"\"}`}\n              options={[{\n                \"label\": \"India\",\n                \"value\": \"India\",\n                \"id\": \"IN\"\n              }]}\n              onChange={e => {\n                onChange(e.value, 'country')\n              }}\n              value={{ label: 'India' }}\n            />\n          </div>\n          <div className='col form-group mb-2'>\n            <label htmlFor=\"state\" className='form-label'>State</label>\n            <Select\n              className={`${error.state ? \"errorSelectField\" : \"\"}`}\n              options={updatedStates(selectedCountryId)}\n              onChange={e => {\n                setSelectedStateId(e.id)\n                setCityValue({ label: null })\n                onChange(e.value, 'state')\n              }}\n              value={data.state && { label: data.state }}\n            />\n            {error.state && <div className='error'>\n              Please enter your state\n            </div>}\n          </div>\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"city\" className='form-label'>City</label>\n          <Select\n            className={`${error.city ? \"errorSelectField\" : \"\"}`}\n            options={updatedCities(selectedCountryId, selectedStateId ? selectedStateId : null)}\n            onChange={e => {\n              setCityValue({ label: e.value })\n              onChange(e.value, 'city')\n            }}\n            value={cityValue.label && cityValue}\n          />\n          {error.city && <div className='error'>\n            Please enter your city\n          </div>}\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"postcode\" className='form-label'>Pincode</label>\n          <input type=\"number\" id='postcode' className={`form-control ${error.postcode ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'postcode')} value={data?.postcode} />\n          {error.postcode && <div className='error'>\n            Please enter your pincode\n          </div>}\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"phone\" className='form-label'>Phone</label>\n          <input type=\"number\" id='phone' className={`form-control ${error.phone ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'phone')} value={data?.phone} />\n          {error.phone && <div className='error'>\n            Please enter valid phone number\n          </div>}\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"email\" className='form-label'>Email Address</label>\n          <input type=\"email\" id='email' className={`form-control ${error.email ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'email')} value={data?.email} />\n          {error.email && <div className='error'>\n            {error.message ? \"Please enter a valid email\" : \"Please enter your email\"}\n          </div>}\n        </div>\n        <button className='btn btn-dark mt-5 mb-2' onClick={e => handleSubmit(e)}>SAVE ADDRESS</button>\n      </form>\n    </div>\n  )\n}\n\nexport default EditAddress\n","export const editAccountValidation = (data) => {\n  const { firstName, lastName, email } = data;\n  var errorVal = {\n    firstName: false,\n    lastName: false,\n    email: false,\n    message: \"\"\n  }\n\n  if (!firstName) {\n    errorVal[\"firstName\"] = true\n  }\n  if (!lastName) {\n    errorVal[\"lastName\"] = true\n  }\n  if (!email) {\n    errorVal[\"email\"] = true\n  }\n  if (email && !(/\\S+@\\S+\\.\\S+/.test(email))) {\n    errorVal[\"email\"] = true\n    errorVal[\"message\"] = \"invalid email\"\n  }\n  return errorVal\n};\n\nexport const editAddressValidation = (data) => {\n  const { firstName, lastName, email, state, streetAddress, city, postcode, phone } = data;\n  var errorVal = {\n    firstName: false,\n    lastName: false,\n    email: false,\n    state: false,\n    streetAddress: false,\n    city: false,\n    postcode: false,\n    phone: false,\n    message: \"\"\n  }\n\n  if (!firstName) {\n    errorVal[\"firstName\"] = true\n  }\n  if (!lastName) {\n    errorVal[\"lastName\"] = true\n  }\n  if (!email) {\n    errorVal[\"email\"] = true\n  }\n  if (email && !(/\\S+@\\S+\\.\\S+/.test(email))) {\n    errorVal[\"email\"] = true\n    errorVal[\"message\"] = \"invalid email\"\n  }\n  // if (!country) {\n  //   errorVal[\"country\"] = true\n  // }\n  if (!state) {\n    errorVal[\"state\"] = true\n  }\n  if (!streetAddress) {\n    errorVal[\"streetAddress\"] = true\n  }\n  if (!city) {\n    errorVal[\"city\"] = true\n  }\n  if (!postcode) {\n    errorVal[\"postcode\"] = true\n  }\n  if (!phone) {\n    errorVal[\"phone\"] = true\n  }\n  if (phone && phone.length != 10) {\n    errorVal[\"phone\"] = true\n  }\n  return errorVal\n};"],"names":["constructor","baseURL","_initializeResponseInterceptor","this","instance","interceptors","response","use","_handleResponse","_handleError","data","async","config","_ref","Promise","resolve","axios","Axios","HttpClient","super","process","_initializeRequestInterceptor","request","_handleRequest","token","store","user","currentUser","accessToken","headers","Authorization","sessionStorage","getItem","callApi","url","options","method","header","body","undefined","onUploadProgress","EditAddress","addressType","useParams","searchParams","setSearchParams","useSearchParams","id","get","firstAddress","firstName","lastName","email","phone","contact","navigate","useNavigate","includes","error","setError","useState","state","streetAddress","city","postcode","message","setData","companyName","gstNumber","country","landmark","selectedCountryId","setSelectedCountryId","selectedStateId","setSelectedStateId","cityValue","setCityValue","label","onChange","value","target","useEffect","result","concat","status","pincode","stateId","getUserAccountDetails","_jsxs","className","style","backgroundColor","children","_jsx","marginTop","htmlFor","type","required","e","Select","countryId","State","map","name","isoCode","countryid","City","onClick","preventDefault","valid","editAddressValidation","console","handleSubmit","updatedCities","editAccountValidation","errorVal","test","length"],"sourceRoot":""}
{"version":3,"file":"static/js/2606.ddf45595.chunk.js","mappings":"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","sources":["screens/MyAccount/editAddress.jsx","screens/MyAccount/validation.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { editAddressValidation } from './validation'\nimport Axios from \"../../api/Axios\";\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\nimport { State, City } from \"country-state-city\";\nimport Select from \"react-select\";\nimport store from \"../../store\";\n\nconst axios = new Axios();\n\nconst EditAddress = () => {\n\n  const { addressType } = useParams()\n  const [searchParams, setSearchParams] = useSearchParams();\n  let currentUser = store.getState().user.currentUser\n  const id = searchParams.get('id')\n  const firstAddress = searchParams.get(\"firstAddress\")\n  let firstName = \"\"\n  let lastName = \"\"\n  let email = \"\"\n  let phone = \"\"\n  if(firstAddress && firstAddress == \"true\"){\n     firstName = currentUser.firstName\n     lastName = currentUser.lastName\n     email = currentUser.email\n     phone = currentUser.contact\n  }\n  const navigate = useNavigate()\n  if (![\"billing-address\", \"shipping-address\"].includes(addressType)) {\n    navigate(\"/404\")\n  }\n  const [error, setError] = useState({\n    firstName: false,\n    lastName: false,\n    email: false,\n    state: false,\n    streetAddress: false,\n    city: false,\n    postcode: false,\n    phone: false,\n    message: \"\"\n  });\n\n  const [data, setData] = useState({\n    firstName: firstName,\n    lastName: lastName,\n    email: email,\n    companyName: \"\",\n    gstNumber: \"\",\n    country: \"India\",\n    state: \"\",\n    streetAddress: \"\",\n    landmark: \"\",\n    city: \"\",\n    postcode: \"\",\n    phone: phone\n  });\n\n  const [selectedCountryId, setSelectedCountryId] = useState(\"IN\")\n  const [selectedStateId, setSelectedStateId] = useState(\"\")\n  const [cityValue, setCityValue] = useState({ label: null })\n\n  const updatedStates = (countryId) => State.getStatesOfCountry(countryId).map((state) => ({ label: state.name, value: state.name, id: state.isoCode }));\n\n  const updatedCities = (countryid, stateId) => City.getCitiesOfState(countryid, stateId).map((city) => ({ label: city.name, value: city.name }))\n\n\n  const onChange = (value, target) => {\n    setData({\n      ...data,\n      [target]: value,\n    });\n    if (error.email === true || error.city === true || error.firstName === true || error.lastName === true || error.country === true || error.phone || error.postcode || error.state || error.streetAddress) {\n      setError({\n        ...error,\n        [target]: false\n      })\n    }\n  };\n\n  const getUserAccountDetails = async () => {\n    const options = {\n      method: \"GET\"\n    }\n    const result = await axios.callApi(`user/getAddressById/${id}`, options)\n    if (result.status == 200) {\n      setData({\n        ...data,\n        id: result.data.data.id,\n        firstName: result.data.data.firstName,\n        lastName: result.data.data.lastName,\n        email: result.data.data.email,\n        companyName: result.data.data.companyName,\n        gstNumber: result.data.data.gstNumber,\n        country: result.data.data.country,\n        state: result.data.data.state,\n        streetAddress: result.data.data.streetAddress,\n        landmark: result.data.data.landmark,\n        city: result.data.data.city,\n        postcode: result.data.data.pincode + \"\",\n        phone: result.data.data.contact\n      })\n      setCityValue({ label: result.data.data.city })\n      setSelectedStateId(result.data.data.stateId)\n    }\n  }\n\n  const handleSubmit = async (e) => {\n    try {\n      e.preventDefault()\n      const valid = editAddressValidation(data)\n      cityValue.label == null ? setError({ ...valid, city: true }) : setError(valid)\n      if (valid.city || valid.firstName || valid.lastName || valid.email || valid.country || valid.phone || valid.postcode || valid.state || valid.streetAddress || cityValue.label == null) {\n        return\n      }\n      const options = {\n        method: \"POST\",\n        body: { ...data, selectedStateId, addressType: (addressType == \"billing-address\") ? \"billing\" : \"shipping\" }\n      }\n      const result = await axios.callApi(`user/createEditAddresses`, options)\n      if (result.status == 200) {\n        navigate(\"/my-account/addresses\")\n      }\n    }\n    catch (error) {\n      console.error(\"Something went wrong\")\n    }\n  }\n\n  useEffect(() => {\n    if (id)\n      getUserAccountDetails()\n  }, [])\n\n  return (\n    <div className=\"edit-account-container container-fluid\" style={{ backgroundColor: \"white\" }}>\n      <div className=\"text-style\">\n        {addressType === \"billing-address\" ? \"Billing address\" : \"Shipping address\"}\n      </div>\n      <form>\n        <div className=\"row\" style={{ marginTop: \"25px\" }}>\n          <div className='col-sm-12 col-lg-6 form-group mb-2'>\n            <label htmlFor=\"firstName\" className='form-label'>First Name</label>\n            <input type=\"text\" id='firstName' className={`form-control ${error.firstName ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'firstName')} value={data?.firstName} />\n            {error.firstName && <div className='error'>\n              Please enter your first name\n            </div>}\n          </div>\n          <div className='col form-group mb-2'>\n            <label htmlFor=\"lastName\" className='form-label'>Last Name</label>\n            <input type=\"text\" id='lastName' className={`form-control ${error.lastName ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'lastName')} value={data?.lastName} />\n            {error.lastName && <div className='error'>\n              Please enter your last name\n            </div>}\n          </div>\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"companyName\" className='form-label'>Company name (Optional)</label>\n          <input type=\"text\" id='companyName' className=\"form-control\" onChange={e => onChange(e.target.value, 'companyName')} value={data?.companyName} />\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"gstNumber\" className='form-label'>GST No. (Optional)</label>\n          <input type=\"text\" id='gstNumber' className=\"form-control\" onChange={e => onChange(e.target.value, 'gstNumber')} value={data?.gstNumber} />\n        </div>\n        <div className=\"row\">\n          <div className='col-sm-12 col-lg-6 form-group mb-2'>\n            <label htmlFor=\"streetAddress\" className='form-label'>Address</label>\n            <input type=\"text\" id='streetAddress' className={`form-control ${error.streetAddress ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'streetAddress')} value={data?.streetAddress} />\n            {error.streetAddress && <div className='error'>\n              Please enter your address\n            </div>}\n          </div>\n          <div className='col form-group mb-2'>\n            <label htmlFor=\"landmark\" className='form-label'>Landmark (Optional)</label>\n            <input type=\"text\" id=\"landmark\" className=\"form-control\" onChange={e => onChange(e.target.value, 'landmark')} value={data?.landmark} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className='col-sm-12 col-lg-6 form-group mb-2'>\n            <label className='form-label'>Country</label>\n            <Select\n              className={`${error.country ? \"errorSelectField\" : \"\"}`}\n              options={[{\n                \"label\": \"India\",\n                \"value\": \"India\",\n                \"id\": \"IN\"\n              }]}\n              onChange={e => {\n                onChange(e.value, 'country')\n              }}\n              value={{ label: 'India' }}\n            />\n          </div>\n          <div className='col form-group mb-2'>\n            <label htmlFor=\"state\" className='form-label'>State</label>\n            <Select\n              className={`${error.state ? \"errorSelectField\" : \"\"}`}\n              options={updatedStates(selectedCountryId)}\n              onChange={e => {\n                setSelectedStateId(e.id)\n                setCityValue({ label: null })\n                onChange(e.value, 'state')\n              }}\n              value={data.state && { label: data.state }}\n            />\n            {error.state && <div className='error'>\n              Please enter your state\n            </div>}\n          </div>\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"city\" className='form-label'>City</label>\n          <Select\n            className={`${error.city ? \"errorSelectField\" : \"\"}`}\n            options={updatedCities(selectedCountryId, selectedStateId ? selectedStateId : null)}\n            onChange={e => {\n              setCityValue({ label: e.value })\n              onChange(e.value, 'city')\n            }}\n            value={cityValue.label && cityValue}\n          />\n          {error.city && <div className='error'>\n            Please enter your city\n          </div>}\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"postcode\" className='form-label'>Pincode</label>\n          <input type=\"number\" id='postcode' className={`form-control ${error.postcode ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'postcode')} value={data?.postcode} />\n          {error.postcode && <div className='error'>\n            Please enter your pincode\n          </div>}\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"phone\" className='form-label'>Phone</label>\n          <input type=\"number\" id='phone' className={`form-control ${error.phone ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'phone')} value={data?.phone} />\n          {error.phone && <div className='error'>\n            Please enter valid phone number\n          </div>}\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"email\" className='form-label'>Email Address</label>\n          <input type=\"email\" id='email' className={`form-control ${error.email ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'email')} value={data?.email} />\n          {error.email && <div className='error'>\n            {error.message ? \"Please enter a valid email\" : \"Please enter your email\"}\n          </div>}\n        </div>\n        <button className='btn btn-dark mt-5 mb-2' onClick={e => handleSubmit(e)}>SAVE ADDRESS</button>\n      </form>\n    </div>\n  )\n}\n\nexport default EditAddress\n","export const editAccountValidation = (data) => {\n  const { firstName, lastName, email } = data;\n  var errorVal = {\n    firstName: false,\n    lastName: false,\n    email: false,\n    message: \"\"\n  }\n\n  if (!firstName) {\n    errorVal[\"firstName\"] = true\n  }\n  if (!lastName) {\n    errorVal[\"lastName\"] = true\n  }\n  if (!email) {\n    errorVal[\"email\"] = true\n  }\n  if (email && !(/\\S+@\\S+\\.\\S+/.test(email))) {\n    errorVal[\"email\"] = true\n    errorVal[\"message\"] = \"invalid email\"\n  }\n  return errorVal\n};\n\nexport const editAddressValidation = (data) => {\n  const { firstName, lastName, email, state, streetAddress, city, postcode, phone } = data;\n  var errorVal = {\n    firstName: false,\n    lastName: false,\n    email: false,\n    state: false,\n    streetAddress: false,\n    city: false,\n    postcode: false,\n    phone: false,\n    message: \"\"\n  }\n\n  if (!firstName) {\n    errorVal[\"firstName\"] = true\n  }\n  if (!lastName) {\n    errorVal[\"lastName\"] = true\n  }\n  if (!email) {\n    errorVal[\"email\"] = true\n  }\n  if (email && !(/\\S+@\\S+\\.\\S+/.test(email))) {\n    errorVal[\"email\"] = true\n    errorVal[\"message\"] = \"invalid email\"\n  }\n  // if (!country) {\n  //   errorVal[\"country\"] = true\n  // }\n  if (!state) {\n    errorVal[\"state\"] = true\n  }\n  if (!streetAddress) {\n    errorVal[\"streetAddress\"] = true\n  }\n  if (!city) {\n    errorVal[\"city\"] = true\n  }\n  if (!postcode) {\n    errorVal[\"postcode\"] = true\n  }\n  if (!phone) {\n    errorVal[\"phone\"] = true\n  }\n  if (phone && phone.length != 10) {\n    errorVal[\"phone\"] = true\n  }\n  return errorVal\n};"],"names":["axios","Axios","EditAddress","addressType","useParams","searchParams","setSearchParams","useSearchParams","currentUser","store","user","id","get","firstAddress","firstName","lastName","email","phone","contact","navigate","useNavigate","includes","error","setError","useState","state","streetAddress","city","postcode","message","data","setData","companyName","gstNumber","country","landmark","selectedCountryId","setSelectedCountryId","selectedStateId","setSelectedStateId","cityValue","setCityValue","label","onChange","value","target","useEffect","async","result","callApi","concat","method","status","pincode","stateId","getUserAccountDetails","_jsxs","className","style","backgroundColor","children","_jsx","marginTop","htmlFor","type","required","e","Select","options","countryId","State","map","name","isoCode","countryid","City","onClick","preventDefault","valid","editAddressValidation","body","console","handleSubmit","updatedCities","editAccountValidation","errorVal","test","length"],"sourceRoot":""}
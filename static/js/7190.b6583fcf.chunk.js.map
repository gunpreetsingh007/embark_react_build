{"version":3,"file":"static/js/7190.b6583fcf.chunk.js","mappings":"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","sources":["api/index.js","api/Axios.js","helpers/trackUserEvent.js","screens/MyAccount/editAccount.jsx","screens/MyAccount/validation.js"],"sourcesContent":["import axios from 'axios';\nclass HttpClient {\n\n  constructor(baseURL) {\n    this.instance = axios.create({\n      baseURL,\n    });\n\n    this._initializeResponseInterceptor();\n  }\n\n  _initializeResponseInterceptor = () => {\n    this.instance.interceptors.response.use(\n      this._handleResponse,\n      this._handleError,\n    );\n  };\n\n  _handleResponse = (data) => data;\n\n  _handleError = async ({ response, config }) => {\n    const originalRequest = config;\n    // if (response?.status === 401 && !originalRequest._retry) {\n    //   // call refresh token\n    //   localStorage.clear();\n    //   sessionStorage.clear()\n    //   store.dispatch(logout())\n    //   window.location.href = '/sign-in'\n    // }\n    return Promise.resolve(response);\n  };\n}\n\nexport default HttpClient;","import HttpClient from \"./index\";\nimport store from \"../store\";\nexport default class Axios extends HttpClient {\n  constructor() {\n    super(process.env.REACT_APP_BASE_URL);\n    this._initializeRequestInterceptor();\n  }\n\n\n  _initializeRequestInterceptor = () => {\n    this.instance.interceptors.request.use(this._handleRequest);\n  };\n\n  _handleRequest = async (config) => {\n    let token = store.getState().user.currentUser.accessToken\n    if (token)\n    config.headers.Authorization = token;\n    if(sessionStorage.getItem('session-id'))\n    config.headers['session-id'] = sessionStorage.getItem('session-id');\n    // config.headers['CSRF-TOKEN'] = Cookies.get('v2');\n    return config;\n  };\n\n  callApi(url, options) {\n    return this.instance({\n      method: options.method,\n      url: url,\n      headers: options?.header ? options?.header : {},\n      data: options?.body ? options?.body : undefined,\n      onUploadProgress: options?.onUploadProgress ? options?.onUploadProgress : undefined\n    });\n  };\n}\n","import Axios from \"../api/Axios\";\r\n\r\nconst axios = new Axios();\r\n\r\nconst trackUserEvent = (event) => {\r\n    if (sessionStorage.getItem(\"session-id\") && isValidUUID(sessionStorage.getItem(\"session-id\"))) {\r\n        axios.callApi(\"/session/trackUserEvent\", {\r\n            method: \"POST\",\r\n            body: {\r\n                event\r\n            }\r\n        })\r\n    }\r\n    else {\r\n        sessionStorage.removeItem('session-id');\r\n        const keyword = 'utm'; // The keyword you want to match\r\n        const matchingParams = getParamsMatchingKeyword(keyword);\r\n        let options = {\r\n            method: \"POST\",\r\n            body: {\r\n                additionalDetails: matchingParams,\r\n                event\r\n            }\r\n        }\r\n        axios.callApi(\"/session/createNewSession\", options).then((result) => {\r\n            sessionStorage.setItem('session-id', result.data.data)\r\n        })\r\n    }\r\n}\r\n\r\nfunction getParamsMatchingKeyword(keyword) {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const matchingParams = {};\r\n\r\n    for (const [key, value] of params) {\r\n        if (key.includes(keyword)) {\r\n            matchingParams[key] = value;\r\n        }\r\n    }\r\n\r\n    return matchingParams;\r\n}\r\n\r\nfunction isValidUUID(uuid) {\r\n    const uuidPattern = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[4][0-9a-fA-F]{3}-[89ABab][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/;\r\n    return uuidPattern.test(uuid);\r\n}\r\n\r\nexport default trackUserEvent","import { useEffect, useState } from \"react\";\nimport { editAccountValidation } from './validation'\nimport Axios from \"../../api/Axios\";\nimport { useNavigate, useOutletContext } from 'react-router-dom';\nimport trackUserEvent from \"../../helpers/trackUserEvent\";\n\nconst axios = new Axios();\n\nconst EditAccount = () => {\n\n  const navigate = useNavigate();\n  const userData = useOutletContext()\n  const [error, setError] = useState({\n    firstName: false,\n    lastName: false,\n    email: false,\n    // username: false,\n    confirmPassword: false,\n    message: \"\"\n  });\n\n  const [data, setData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    // username: \"\",\n    email: \"\",\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\"\n  });\n\n  // const [isUsernameTaken, setIsUsernameTaken] = useState(false)\n  // const [actualUsername, setActualUsername] = useState(\"\")\n  const onChange = (value, target) => {\n    setData({\n      ...data,\n      [target]: value,\n    });\n    if (error.email === true || error.confirmPassword === true || error.firstName === true || error.lastName === true) {\n      setError({\n        ...error,\n        [target]: false\n      })\n    }\n  };\n\n  // const checkUsername = async () => {\n  //   const options = {\n  //     method: \"GET\",\n  //   }\n  //   if (data.username) {\n  //     const result = await axios.callApi(`auth/checkByUsername/${data.username}`, options)\n  //     if (result.data.usernameExists) {\n  //       setError({ ...error, username: true })\n  //       setIsUsernameTaken(true)\n  //     }\n  //     else {\n  //       setError({ ...error, username: false })\n  //       setIsUsernameTaken(false)\n  //     }\n  //   }\n  //   else {\n  //     setError({ ...error, username: false })\n  //     setIsUsernameTaken(false)\n  //   }\n\n  // }\n\n  const getUserAccountDetails = () => {\n    setData({ ...data, ...userData })\n    // setActualUsername(userData.username)\n  }\n  \n  const handleSubmit = async (e) => {\n    try {\n      e.preventDefault()\n      const valid = editAccountValidation(data)\n      if (!(data.newPassword === data.confirmPassword)) {\n        valid[\"confirmPassword\"] = true\n      }\n      // data.username && !isUsernameTaken ? setError(valid) : setError({ ...valid, username: true })\n      setError(valid)\n      if (valid.firstName || valid.lastName || valid.email || valid.confirmPassword) {\n        return\n      }\n      const options = {\n        method: \"POST\",\n        body: data\n      }\n      const result = await axios.callApi(`user/updateUser`, options)\n      if (result.status == 200) {\n        navigate(\"/\")\n      }\n    }\n    catch (error) {\n      console.error(\"Something went wrong\")\n    }\n  }\n\n  // useEffect(() => {\n  //   const typingTimer = setTimeout(() => {\n  //     if (actualUsername != data.username.trim())\n  //       checkUsername(data.username)\n  //   }, 1000);\n\n  //   return () => {\n  //     clearTimeout(typingTimer)\n  //   }\n  // }, [data.username])\n\n  useEffect(() => {\n    getUserAccountDetails()\n  }, [userData])\n\n  useEffect(() => {\n    trackUserEvent(\"Edit Account\")\n  },[])\n\n  return (\n    <div className=\"edit-account-container container-fluid\" style={{ backgroundColor: \"white\" }}>\n      <form>\n        <div className=\"row\" style={{ marginTop: \"25px\" }}>\n          <div className='col-lg-6 col-sm-12 form-group mb-2'>\n            <label htmlFor=\"firstName\" className='form-label'>First Name</label>\n            <input type=\"text\" id='firstName' className={`form-control ${error.firstName ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'firstName')} value={data.firstName} />\n            {error.firstName && <div className='error'>\n              Please enter your first name\n            </div>}\n          </div>\n          <div className='col-lg-6 col-sm-12 form-group mb-2'>\n            <label htmlFor=\"lastName\" className='form-label'>Last Name</label>\n            <input type=\"text\" id='lastName' className={`form-control ${error.lastName ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'lastName')} value={data.lastName} />\n            {error.lastName && <div className='error'>\n              Please enter your last name\n            </div>}\n          </div>\n        </div>\n        {/* <div className='form-group mb-2'>\n          <label htmlFor=\"username\" className='form-label'>Username</label>\n          <input type=\"text\" id='username' className={`form-control ${error.username ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'username')} value={data.username} />\n          {error.username && <div className='error'>\n            {isUsernameTaken ? \"Username already use\" : \"Please enter your username\"}\n          </div>}\n        </div>\n        <i className=\"text-style\">This will be how your name will be displayed in the account section and in reviews</i> */}\n        <div className='form-group mb-2'>\n          <label htmlFor=\"email\" className='form-label'>Email Address</label>\n          <input type=\"email\" id='email' className={`form-control ${error.email ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'email')} value={data.email} />\n          {error.email && <div className='error'>\n            {error.message ? \"Please enter a valid email\" : \"Please enter your email\"}\n          </div>}\n        </div>\n        <span className=\"text-style\" style={{ margin: \"15px 0px\", display: \"inline-block\" }}>PASSWORD CHANGE</span>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"current password\" className='form-label'>Current password (leave blank to leave unchanged)</label>\n          <input type=\"password\" id='current password' className={`form-control`} required onChange={e => onChange(e.target.value, 'currentPassword')} />\n          {/* {error.password && <div className='error'>\n            Please enter your password\n          </div>} */}\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"new password\" className='form-label'>New password (leave blank to leave unchanged) </label>\n          <input type=\"password\" id='new password' className={`form-control`} required onChange={e => onChange(e.target.value, 'newPassword')} />\n          {/* {error.password && <div className='error'>\n            Please enter your password\n          </div>} */}\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"confirm password\" className='form-label'>Confirm new password</label>\n          <input type=\"password\" id='confirm password' className={`form-control ${error.confirmPassword ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'confirmPassword')} />\n          {error.confirmPassword && <div className='error'>\n            Passwords do not match\n          </div>}\n        </div>\n        <button className='btn btn-dark mt-5 mb-2' onClick={e => handleSubmit(e)}>SAVE CHANGES</button>\n      </form>\n    </div>\n  )\n}\n\nexport default EditAccount\n","export const editAccountValidation = (data) => {\n  const { firstName, lastName, email } = data;\n  var errorVal = {\n    firstName: false,\n    lastName: false,\n    email: false,\n    message: \"\"\n  }\n\n  if (!firstName) {\n    errorVal[\"firstName\"] = true\n  }\n  if (!lastName) {\n    errorVal[\"lastName\"] = true\n  }\n  if (!email) {\n    errorVal[\"email\"] = true\n  }\n  if (email && !(/\\S+@\\S+\\.\\S+/.test(email))) {\n    errorVal[\"email\"] = true\n    errorVal[\"message\"] = \"invalid email\"\n  }\n  return errorVal\n};\n\nexport const editAddressValidation = (data) => {\n  const { firstName, lastName, email, state, streetAddress, city, postcode, phone } = data;\n  var errorVal = {\n    firstName: false,\n    lastName: false,\n    email: false,\n    state: false,\n    streetAddress: false,\n    city: false,\n    postcode: false,\n    phone: false,\n    message: \"\"\n  }\n\n  if (!firstName) {\n    errorVal[\"firstName\"] = true\n  }\n  if (!lastName) {\n    errorVal[\"lastName\"] = true\n  }\n  if (!email) {\n    errorVal[\"email\"] = true\n  }\n  if (email && !(/\\S+@\\S+\\.\\S+/.test(email))) {\n    errorVal[\"email\"] = true\n    errorVal[\"message\"] = \"invalid email\"\n  }\n  // if (!country) {\n  //   errorVal[\"country\"] = true\n  // }\n  if (!state) {\n    errorVal[\"state\"] = true\n  }\n  if (!streetAddress) {\n    errorVal[\"streetAddress\"] = true\n  }\n  if (!city) {\n    errorVal[\"city\"] = true\n  }\n  if (!postcode) {\n    errorVal[\"postcode\"] = true\n  }\n  if (!phone) {\n    errorVal[\"phone\"] = true\n  }\n  if (phone && phone.length != 10) {\n    errorVal[\"phone\"] = true\n  }\n  return errorVal\n};"],"names":["constructor","baseURL","_initializeResponseInterceptor","this","instance","interceptors","response","use","_handleResponse","_handleError","data","async","config","_ref","Promise","resolve","axios","Axios","HttpClient","super","process","_initializeRequestInterceptor","request","_handleRequest","token","store","user","currentUser","accessToken","headers","Authorization","sessionStorage","getItem","callApi","url","options","method","header","body","undefined","onUploadProgress","event","uuid","test","removeItem","matchingParams","keyword","params","URLSearchParams","window","location","search","key","value","includes","getParamsMatchingKeyword","additionalDetails","then","result","setItem","EditAccount","navigate","useNavigate","userData","useOutletContext","error","setError","useState","firstName","lastName","email","confirmPassword","message","setData","currentPassword","newPassword","onChange","target","useEffect","trackUserEvent","_jsx","className","style","backgroundColor","children","_jsxs","marginTop","htmlFor","type","id","concat","required","e","margin","display","onClick","preventDefault","valid","editAccountValidation","status","console","handleSubmit","errorVal","editAddressValidation","state","streetAddress","city","postcode","phone","length"],"sourceRoot":""}
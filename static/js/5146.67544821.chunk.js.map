{"version":3,"file":"static/js/5146.67544821.chunk.js","mappings":"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","sources":["api/index.js","api/Axios.js","helpers/trackUserEvent.js","helpers/triggerSwalAlert.js","screens/ResetPassword/index.jsx","screens/ResetPassword/validation.js"],"sourcesContent":["import axios from 'axios';\nclass HttpClient {\n\n  constructor(baseURL) {\n    this.instance = axios.create({\n      baseURL,\n    });\n\n    this._initializeResponseInterceptor();\n  }\n\n  _initializeResponseInterceptor = () => {\n    this.instance.interceptors.response.use(\n      this._handleResponse,\n      this._handleError,\n    );\n  };\n\n  _handleResponse = (data) => data;\n\n  _handleError = async ({ response, config }) => {\n    const originalRequest = config;\n    // if (response?.status === 401 && !originalRequest._retry) {\n    //   // call refresh token\n    //   localStorage.clear();\n    //   sessionStorage.clear()\n    //   store.dispatch(logout())\n    //   window.location.href = '/sign-in'\n    // }\n    return Promise.resolve(response);\n  };\n}\n\nexport default HttpClient;","import HttpClient from \"./index\";\nimport store from \"../store\";\nexport default class Axios extends HttpClient {\n  constructor() {\n    super(process.env.REACT_APP_BASE_URL);\n    this._initializeRequestInterceptor();\n  }\n\n\n  _initializeRequestInterceptor = () => {\n    this.instance.interceptors.request.use(this._handleRequest);\n  };\n\n  _handleRequest = async (config) => {\n    let token = store.getState().user.currentUser.accessToken\n    if (token)\n    config.headers.Authorization = token;\n    if(sessionStorage.getItem('session-id'))\n    config.headers['session-id'] = sessionStorage.getItem('session-id');\n    // config.headers['CSRF-TOKEN'] = Cookies.get('v2');\n    return config;\n  };\n\n  callApi(url, options) {\n    return this.instance({\n      method: options.method,\n      url: url,\n      headers: options?.header ? options?.header : {},\n      data: options?.body ? options?.body : undefined,\n      onUploadProgress: options?.onUploadProgress ? options?.onUploadProgress : undefined\n    });\n  };\n}\n","import Axios from \"../api/Axios\";\r\n\r\nconst axios = new Axios();\r\n\r\nconst trackUserEvent = (event) => {\r\n    if (sessionStorage.getItem(\"session-id\") && isValidUUID(sessionStorage.getItem(\"session-id\"))) {\r\n        axios.callApi(\"/session/trackUserEvent\", {\r\n            method: \"POST\",\r\n            body: {\r\n                event\r\n            }\r\n        })\r\n    }\r\n    else {\r\n        sessionStorage.removeItem('session-id');\r\n        const keyword = 'utm'; // The keyword you want to match\r\n        const matchingParams = getParamsMatchingKeyword(keyword);\r\n        let options = {\r\n            method: \"POST\",\r\n            body: {\r\n                additionalDetails: matchingParams,\r\n                event\r\n            }\r\n        }\r\n        axios.callApi(\"/session/createNewSession\", options).then((result) => {\r\n            sessionStorage.setItem('session-id', result.data.data)\r\n        })\r\n    }\r\n}\r\n\r\nfunction getParamsMatchingKeyword(keyword) {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const matchingParams = {};\r\n\r\n    for (const [key, value] of params) {\r\n        if (key.includes(keyword)) {\r\n            matchingParams[key] = value;\r\n        }\r\n    }\r\n\r\n    return matchingParams;\r\n}\r\n\r\nfunction isValidUUID(uuid) {\r\n    const uuidPattern = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[4][0-9a-fA-F]{3}-[89ABab][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/;\r\n    return uuidPattern.test(uuid);\r\n}\r\n\r\nexport default trackUserEvent","import Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst MySwal = withReactContent(Swal)\n\n\nconst triggerSwalAlert = async (title, message, type)=>{\n    return MySwal.fire({\n      title: <strong>{title}</strong>,\n      html: <p>{message}</p>,\n      icon: type\n    })\n}\n\nexport default triggerSwalAlert","import { useState, useEffect } from \"react\";\nimport \"./index.css\"\nimport { validation } from \"./validation\"\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Axios from '../../api/Axios';\nimport triggerSwalAlert from \"../../helpers/triggerSwalAlert\";\nimport Loader from \"../../components/Loader\";\nimport trackUserEvent from \"../../helpers/trackUserEvent\";\n\nconst axios = new Axios();\n\nconst ResetPassword = () => {\n\n    const { token } = useParams()\n\n    const [pending, setPending] = useState(false)\n\n    const navigator = useNavigate()\n\n    const [error, setError] = useState({\n        email: false,\n        confirmPassword: false,\n        message: \"\"\n    });\n\n    const [data, setData] = useState({\n        email: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\"\n    });\n\n    const onChange = (value, target) => {\n        setData({\n            ...data,\n            [target]: value,\n        });\n        if (error.email === true || error.confirmPassword === true || error.newPassword === true) {\n            setError({\n                ...error,\n                [target]: false\n            })\n        }\n    };\n\n    const handleResetPassword = async (e) => {\n        e.preventDefault()\n        const valid = validation(data)\n        if (!(data.newPassword === data.confirmPassword)) {\n            valid[\"confirmPassword\"] = true\n        }\n        setError(valid)\n        if (valid.email || valid.confirmPassword || valid.newPassword) {\n            return\n        }\n        try {\n            const options = {\n                method: \"POST\",\n                body: { ...data, token }\n            }\n            setPending(true)\n            const result = await axios.callApi(`auth/resetPassword`, options)\n            if (result.status == 200){\n                setPending(false)\n                navigator(\"/sign-in\")\n                triggerSwalAlert(\"Success\", \"Password has been reset\", \"success\")\n            }\n            else{\n                setPending(false)\n                triggerSwalAlert(\"Failure\", \"Error in changing password\", \"error\")\n            }\n        }\n        catch (error) {\n            console.error(\"Something went wrong\")\n        }\n    }\n\n    const verifyToken = async () => {\n        try {\n            const options = {\n                method: \"POST\",\n                body: { token }\n            }\n            const result = await axios.callApi(`auth/verifyForgetToken`, options)\n            if (result.status == 200) {\n                setData({ ...data, email: result.data.data.email })\n            }\n            else\n                navigator(\"*\")\n        }\n        catch (error) {\n            console.error(\"Something went wrong\")\n        }\n    }\n    useEffect(() => {\n        verifyToken()\n    }, [])\n\n    useEffect(() => {\n        trackUserEvent(\"Reset Password\")\n    },[])\n\n    return (\n        <>\n        {pending ? <Loader/> : null}\n        <div className='resetPassword-wrapper bg-dark d-flex align-item-center justify-content-center w-100'>\n            <div className='resetPassword'>\n                <h2 className='mb-3'>Reset Passowrd</h2>\n                <form>\n                    <div className='form-group mb-2'>\n                        <label htmlFor=\"email\" className='form-label'>Email Address</label>\n                        <input disabled id='email' className={`form-control ${error.email && \"errorInputField\"}`} required onChange={e => onChange(e.target.value, 'email')} value={data.email} />\n                        {error.email && <div className='error'>\n                            {error.message ? \"Please enter a valid email\" : \"Please enter your email\"}\n                        </div>}\n                    </div>\n                    <div className='form-group mb-2'>\n                        <label htmlFor=\"new password\" className='form-label'>New password</label>\n                        <input type=\"password\" id='new password' className={`form-control ${error.newPassword ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'newPassword')} />\n                        {error.newPassword && <div className='error'>\n                            Please enter a password\n                        </div>}\n                    </div>\n                    <div className='form-group mb-2'>\n                        <label htmlFor=\"confirm password\" className='form-label'>Confirm new password</label>\n                        <input type=\"password\" id='confirm password' className={`form-control ${error.confirmPassword ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'confirmPassword')} />\n                        {error.confirmPassword && <div className='error'>\n                            Passwords do not match\n                        </div>}\n                    </div>\n                    <button className='btn btn-dark w-100 mt-2' onClick={e => handleResetPassword(e)}>RESET PASSWORD</button>\n                </form>\n            </div>\n        </div>\n        </>\n    )\n}\n\nexport default ResetPassword\n","export const validation = (data) => {\n  const { email, newPassword } = data;\n  var errorVal = {\n    email: false,\n    newPassword: false,\n    message: \"\"\n  }\n  if (!email) {\n    errorVal[\"email\"] = true\n  }\n  if (email && !(/\\S+@\\S+\\.\\S+/.test(email))) {\n    errorVal[\"email\"] = true\n    errorVal[\"message\"] = \"invalid email\"\n  }\n  if (!newPassword) {\n    errorVal[\"newPassword\"] = true\n  }\n  return errorVal\n};\n"],"names":["constructor","baseURL","_initializeResponseInterceptor","this","instance","interceptors","response","use","_handleResponse","_handleError","data","async","config","_ref","Promise","resolve","axios","Axios","HttpClient","super","process","_initializeRequestInterceptor","request","_handleRequest","token","store","user","currentUser","accessToken","headers","Authorization","sessionStorage","getItem","callApi","url","options","method","header","body","undefined","onUploadProgress","event","uuid","test","removeItem","matchingParams","keyword","params","URLSearchParams","window","location","search","key","value","includes","getParamsMatchingKeyword","additionalDetails","then","result","setItem","MySwal","withReactContent","Swal","title","message","type","fire","_jsx","children","html","icon","ResetPassword","useParams","pending","setPending","useState","navigator","useNavigate","error","setError","email","confirmPassword","setData","newPassword","onChange","target","useEffect","status","console","verifyToken","trackUserEvent","_jsxs","_Fragment","Loader","className","htmlFor","disabled","id","concat","required","e","onClick","preventDefault","valid","errorVal","validation","triggerSwalAlert","handleResetPassword"],"sourceRoot":""}
{"version":3,"file":"static/js/9779.cc0139ad.chunk.js","mappings":"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","sources":["api/index.js","api/Axios.js","helpers/trackUserEvent.js","screens/MyAccount/addEditAddress.jsx","screens/MyAccount/validation.js"],"sourcesContent":["import axios from 'axios';\nclass HttpClient {\n\n  constructor(baseURL) {\n    this.instance = axios.create({\n      baseURL,\n    });\n\n    this._initializeResponseInterceptor();\n  }\n\n  _initializeResponseInterceptor = () => {\n    this.instance.interceptors.response.use(\n      this._handleResponse,\n      this._handleError,\n    );\n  };\n\n  _handleResponse = (data) => data;\n\n  _handleError = async ({ response, config }) => {\n    const originalRequest = config;\n    // if (response?.status === 401 && !originalRequest._retry) {\n    //   // call refresh token\n    //   localStorage.clear();\n    //   sessionStorage.clear()\n    //   store.dispatch(logout())\n    //   window.location.href = '/sign-in'\n    // }\n    return Promise.resolve(response);\n  };\n}\n\nexport default HttpClient;","import HttpClient from \"./index\";\nimport store from \"../store\";\nexport default class Axios extends HttpClient {\n  constructor() {\n    super(process.env.REACT_APP_BASE_URL);\n    this._initializeRequestInterceptor();\n  }\n\n\n  _initializeRequestInterceptor = () => {\n    this.instance.interceptors.request.use(this._handleRequest);\n  };\n\n  _handleRequest = async (config) => {\n    let token = store.getState().user.currentUser.accessToken\n    if (token)\n    config.headers.Authorization = token;\n    if(sessionStorage.getItem('session-id'))\n    config.headers['session-id'] = sessionStorage.getItem('session-id');\n    // config.headers['CSRF-TOKEN'] = Cookies.get('v2');\n    return config;\n  };\n\n  callApi(url, options) {\n    return this.instance({\n      method: options.method,\n      url: url,\n      headers: options?.header ? options?.header : {},\n      data: options?.body ? options?.body : undefined,\n      onUploadProgress: options?.onUploadProgress ? options?.onUploadProgress : undefined\n    });\n  };\n}\n","import Axios from \"../api/Axios\";\r\n\r\nconst axios = new Axios();\r\n\r\nconst trackUserEvent = (event) => {\r\n    if (sessionStorage.getItem(\"session-id\") && isValidUUID(sessionStorage.getItem(\"session-id\"))) {\r\n        axios.callApi(\"/session/trackUserEvent\", {\r\n            method: \"POST\",\r\n            body: {\r\n                event\r\n            }\r\n        })\r\n    }\r\n    else {\r\n        sessionStorage.removeItem('session-id');\r\n        const keyword = 'utm'; // The keyword you want to match\r\n        const matchingParams = getParamsMatchingKeyword(keyword);\r\n        let options = {\r\n            method: \"POST\",\r\n            body: {\r\n                additionalDetails: matchingParams,\r\n                event\r\n            }\r\n        }\r\n        axios.callApi(\"/session/createNewSession\", options).then((result) => {\r\n            sessionStorage.setItem('session-id', result.data.data)\r\n        })\r\n    }\r\n}\r\n\r\nfunction getParamsMatchingKeyword(keyword) {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const matchingParams = {};\r\n\r\n    for (const [key, value] of params) {\r\n        if (key.includes(keyword)) {\r\n            matchingParams[key] = value;\r\n        }\r\n    }\r\n\r\n    return matchingParams;\r\n}\r\n\r\nfunction isValidUUID(uuid) {\r\n    const uuidPattern = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[4][0-9a-fA-F]{3}-[89ABab][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/;\r\n    return uuidPattern.test(uuid);\r\n}\r\n\r\nexport default trackUserEvent","import { useEffect, useState } from \"react\";\nimport { editAddressValidation } from './validation'\nimport Axios from \"../../api/Axios\";\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\nimport { State, City } from \"country-state-city\";\nimport Select from \"react-select\";\nimport store from \"../../store\";\nimport trackUserEvent from \"../../helpers/trackUserEvent\";\n\nconst axios = new Axios();\n\nconst AddEditAddress = () => {\n\n  const { addressType } = useParams()\n  const [searchParams, setSearchParams] = useSearchParams();\n  let currentUser = store.getState().user.currentUser\n  const id = searchParams.get('id')\n  const firstAddress = searchParams.get(\"firstAddress\")\n  let firstName = \"\"\n  let lastName = \"\"\n  let email = \"\"\n  let phone = \"\"\n  if(firstAddress && firstAddress == \"true\"){\n     firstName = currentUser.firstName\n     lastName = currentUser.lastName\n     email = currentUser.email\n     phone = currentUser.contact\n  }\n  const navigate = useNavigate()\n  if(![\"billing-address\", \"shipping-address\"].includes(addressType)){\n    navigate(\"/404\")\n  }\n  const [error, setError] = useState({\n    firstName: false,\n    lastName: false,\n    email: false,\n    state: false,\n    streetAddress: false,\n    city: false,\n    postcode: false,\n    phone: false,\n    message: \"\"\n  });\n\n  const [data, setData] = useState({\n    firstName: firstName,\n    lastName: lastName,\n    email: email,\n    companyName: \"\",\n    gstNumber: \"\",\n    country: \"India\",\n    state: \"\",\n    streetAddress: \"\",\n    landmark: \"\",\n    city: \"\",\n    postcode: \"\",\n    phone: phone\n  });\n\n  const [selectedCountryId, setSelectedCountryId] = useState(\"IN\")\n  const [selectedStateId, setSelectedStateId] = useState(\"\")\n  const [cityValue, setCityValue] = useState({ label: null })\n  const add = sessionStorage.getItem('add');\n\n  const updatedStates = (countryId) => State.getStatesOfCountry(countryId).map((state) => ({ label: state.name, value: state.name, id: state.isoCode }));\n\n  const updatedCities = (countryid, stateId) => City.getCitiesOfState(countryid, stateId).map((city) => ({ label: city.name, value: city.name }))\n\n  const onChange = (value, target) => {\n    setData({\n      ...data,\n      [target]: value,\n    });\n    if (error.email === true || error.city === true || error.firstName === true || error.lastName === true || error.country === true || error.phone || error.postcode || error.state || error.streetAddress) {\n      setError({\n        ...error,\n        [target]: false\n      })\n    }\n  };\n\n  const getUserAccountDetails = async () => {\n    const options = {\n      method: \"GET\"\n    }\n    const result = await axios.callApi(`user/getAddressById/${id}`, options)\n    if (result.status == 200) {\n      setData({\n        ...data,\n        id: result.data.data.id,\n        firstName: result.data.data.firstName,\n        lastName: result.data.data.lastName,\n        email: result.data.data.email,\n        companyName: result.data.data.companyName,\n        gstNumber: result.data.data.gstNumber,\n        country: result.data.data.country,\n        state: result.data.data.state,\n        streetAddress: result.data.data.streetAddress,\n        landmark: result.data.data.landmark,\n        city: result.data.data.city,\n        postcode: result.data.data.pincode + \"\",\n        phone: result.data.data.contact\n      })\n      setCityValue({ label: result.data.data.city })\n      setSelectedStateId(result.data.data.stateId)\n    }\n  }\n\n  const handleSubmit = async (e) => {\n    try {\n      e.preventDefault()\n      const valid = editAddressValidation(data)\n      cityValue.label == null ? setError({ ...valid, city: true }) : setError(valid)\n      if (valid.city || valid.firstName || valid.lastName || valid.email || valid.country || valid.phone || valid.postcode || valid.state || valid.streetAddress || cityValue.label == null) {\n        return\n      }\n      const options = {\n        method: \"POST\",\n        body: { ...data, selectedStateId, addressType: (addressType == \"billing-address\") ? \"billing\" : \"shipping\" }\n      }\n      const result = await axios.callApi(`user/createEditAddresses`, options)\n      if (result.status == 200) {\n        navigate('/checkout')\n      }\n    }\n    catch (error) {\n      console.error(\"Something went wrong\")\n    }\n  }\n\n  useEffect(() => {\n    if (id)\n      getUserAccountDetails()\n  }, [])\n\n  useEffect(() => {\n    trackUserEvent(\"Add/Edit Address\")\n  },[])\n\n  return (\n    <div className=\"edit-account-container container\" style={{ backgroundColor: \"white\" }}>\n      <div className=\"text-style mt-4\">\n        {addressType === \"billing-address\" ? \"Billing address\" : \"Shipping address\"}\n      </div>\n      <form>\n        <div className=\"row\" style={{ marginTop: \"25px\" }}>\n          <div className='col-sm-12 col-lg-6 form-group mb-2'>\n            <label htmlFor=\"firstName\" className='form-label'>First Name</label>\n            <input type=\"text\" id='firstName' className={`form-control ${error.firstName ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'firstName')} value={data?.firstName} />\n            {error.firstName && <div className='error'>\n              Please enter your first name\n            </div>}\n          </div>\n          <div className='col form-group mb-2'>\n            <label htmlFor=\"lastName\" className='form-label'>Last Name</label>\n            <input type=\"text\" id='lastName' className={`form-control ${error.lastName ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'lastName')} value={data?.lastName} />\n            {error.lastName && <div className='error'>\n              Please enter your last name\n            </div>}\n          </div>\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"companyName\" className='form-label'>Company name (Optional)</label>\n          <input type=\"text\" id='companyName' className=\"form-control\" onChange={e => onChange(e.target.value, 'companyName')} value={data?.companyName} />\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"gstNumber\" className='form-label'>GST No. (Optional)</label>\n          <input type=\"text\" id='gstNumber' className=\"form-control\" onChange={e => onChange(e.target.value, 'gstNumber')} value={data?.gstNumber} />\n        </div>\n        <div className=\"row\">\n          <div className='col-sm-12 col-lg-6 form-group mb-2'>\n            <label htmlFor=\"streetAddress\" className='form-label'>Address</label>\n            <input type=\"text\" id='streetAddress' className={`form-control ${error.streetAddress ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'streetAddress')} value={data?.streetAddress} />\n            {error.streetAddress && <div className='error'>\n              Please enter your address\n            </div>}\n          </div>\n          <div className='col form-group mb-2'>\n            <label htmlFor=\"landmark\" className='form-label'>Landmark (Optional)</label>\n            <input type=\"text\" id=\"landmark\" className=\"form-control\" onChange={e => onChange(e.target.value, 'landmark')} value={data?.landmark} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className='col-sm-12 col-lg-6 form-group mb-2'>\n            <label className='form-label'>Country</label>\n            <Select\n              className={`${error.country ? \"errorSelectField\" : \"\"}`}\n              options={[{\n                \"label\": \"India\",\n                \"value\": \"India\",\n                \"id\": \"IN\"\n              }]}\n              onChange={e => {\n                onChange(e.value, 'country')\n              }}\n              value={{ label: \"India\" }}\n            />\n          </div>\n          <div className='col form-group mb-2'>\n            <label htmlFor=\"state\" className='form-label'>State</label>\n            <Select\n              className={`${error.state ? \"errorSelectField\" : \"\"}`}\n              options={updatedStates(selectedCountryId)}\n              onChange={e => {\n                setSelectedStateId(e.id)\n                setCityValue({ label: null })\n                onChange(e.value, 'state')\n              }}\n              value={data.state && { label: data.state }}\n            />\n            {error.state && <div className='error'>\n              Please enter your state\n            </div>}\n          </div>\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"city\" className='form-label'>City</label>\n          <Select\n            className={`${error.city ? \"errorSelectField\" : \"\"}`}\n            options={updatedCities(selectedCountryId, selectedStateId ? selectedStateId : null)}\n            onChange={e => {\n              setCityValue({ label: e.value })\n              onChange(e.value, 'city')\n            }}\n            value={cityValue.label && cityValue}\n          />\n          {error.city && <div className='error'>\n            Please enter your city\n          </div>}\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"postcode\" className='form-label'>Pincode</label>\n          <input type=\"number\" id='postcode' className={`form-control ${error.postcode ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'postcode')} value={data?.postcode} />\n          {error.postcode && <div className='error'>\n            Please enter your pincode\n          </div>}\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"phone\" className='form-label'>Phone</label>\n          <input type=\"number\" id='phone' className={`form-control ${error.phone ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'phone')} value={data?.phone} />\n          {error.phone && <div className='error'>\n            Please enter valid phone number\n          </div>}\n        </div>\n        <div className='form-group mb-2'>\n          <label htmlFor=\"email\" className='form-label'>Email Address</label>\n          <input type=\"email\" id='email' className={`form-control ${error.email ? \"errorInputField\" : \"\"}`} required onChange={e => onChange(e.target.value, 'email')} value={data?.email} />\n          {error.email && <div className='error'>\n            {error.message ? \"Please enter a valid email\" : \"Please enter your email\"}\n          </div>}\n        </div>\n        <button className='btn btn-dark mt-5 mb-2' onClick={e => handleSubmit(e)}>SAVE ADDRESS</button>\n      </form>\n    </div>\n  )\n}\n\nexport default AddEditAddress;","export const editAccountValidation = (data) => {\n  const { firstName, lastName, email } = data;\n  var errorVal = {\n    firstName: false,\n    lastName: false,\n    email: false,\n    message: \"\"\n  }\n\n  if (!firstName) {\n    errorVal[\"firstName\"] = true\n  }\n  if (!lastName) {\n    errorVal[\"lastName\"] = true\n  }\n  if (!email) {\n    errorVal[\"email\"] = true\n  }\n  if (email && !(/\\S+@\\S+\\.\\S+/.test(email))) {\n    errorVal[\"email\"] = true\n    errorVal[\"message\"] = \"invalid email\"\n  }\n  return errorVal\n};\n\nexport const editAddressValidation = (data) => {\n  const { firstName, lastName, email, state, streetAddress, city, postcode, phone } = data;\n  var errorVal = {\n    firstName: false,\n    lastName: false,\n    email: false,\n    state: false,\n    streetAddress: false,\n    city: false,\n    postcode: false,\n    phone: false,\n    message: \"\"\n  }\n\n  if (!firstName) {\n    errorVal[\"firstName\"] = true\n  }\n  if (!lastName) {\n    errorVal[\"lastName\"] = true\n  }\n  if (!email) {\n    errorVal[\"email\"] = true\n  }\n  if (email && !(/\\S+@\\S+\\.\\S+/.test(email))) {\n    errorVal[\"email\"] = true\n    errorVal[\"message\"] = \"invalid email\"\n  }\n  // if (!country) {\n  //   errorVal[\"country\"] = true\n  // }\n  if (!state) {\n    errorVal[\"state\"] = true\n  }\n  if (!streetAddress) {\n    errorVal[\"streetAddress\"] = true\n  }\n  if (!city) {\n    errorVal[\"city\"] = true\n  }\n  if (!postcode) {\n    errorVal[\"postcode\"] = true\n  }\n  if (!phone) {\n    errorVal[\"phone\"] = true\n  }\n  if (phone && phone.length != 10) {\n    errorVal[\"phone\"] = true\n  }\n  return errorVal\n};"],"names":["constructor","baseURL","_initializeResponseInterceptor","this","instance","interceptors","response","use","_handleResponse","_handleError","data","async","config","_ref","Promise","resolve","axios","Axios","HttpClient","super","process","_initializeRequestInterceptor","request","_handleRequest","token","store","user","currentUser","accessToken","headers","Authorization","sessionStorage","getItem","callApi","url","options","method","header","body","undefined","onUploadProgress","event","uuid","test","removeItem","matchingParams","keyword","params","URLSearchParams","window","location","search","key","value","includes","getParamsMatchingKeyword","additionalDetails","then","result","setItem","AddEditAddress","addressType","useParams","searchParams","setSearchParams","useSearchParams","id","get","firstAddress","firstName","lastName","email","phone","contact","navigate","useNavigate","error","setError","useState","state","streetAddress","city","postcode","message","setData","companyName","gstNumber","country","landmark","selectedCountryId","setSelectedCountryId","selectedStateId","setSelectedStateId","cityValue","setCityValue","label","onChange","target","useEffect","concat","status","pincode","stateId","getUserAccountDetails","trackUserEvent","_jsxs","className","style","backgroundColor","children","_jsx","marginTop","htmlFor","type","required","e","Select","countryId","State","map","name","isoCode","countryid","City","onClick","preventDefault","valid","editAddressValidation","console","handleSubmit","updatedCities","editAccountValidation","errorVal","length"],"sourceRoot":""}